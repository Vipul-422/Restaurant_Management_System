
 -- Assign new customer to table or waiting list
DELIMITER &&
CREATE FUNCTION ASSIGN_TABLE(CUSID int)
RETURNS INT DETERMINISTIC
BEGIN
	DECLARE RESULT INT;
	SELECT ID INTO RESULT FROM TABLES WHERE IS_AVAILABLE = TRUE LIMIT 1;
IF RESULT IS NULL 
THEN 
INSERT INTO WAITING_CUSTOMERS(CUSID) VALUES(CUSID);
RETURN -1;
ELSE 
	INSERT INTO TABLE_ASSIGNED(TABLE_ID,CUSID) VALUES(RESULT,CUSID);
RETURN RESULT;
END IF;

END &&


DELIMITER ;



DELIMITER &&
CREATE FUNCTION ADD_RESTAURANT(a int, contact numeric(10),address varchar(30))
RETURNS INT DETERMINISTIC
BEGIN
INSERT INTO RESTAURANT(RNAME,CONTACT_NO,ADDRESS) VALUES(a,contact,address);
RETURN last_insert_id();
END 
&&
DELIMITER ;



DELIMITER &&
CREATE FUNCTION ADD_CUSTOMER(a int, contact numeric(10),rid int)
RETURNS INT DETERMINISTIC
BEGIN
INSERT INTO CUSTOMER(CUSNAME,CONTACT_NO,RID) VALUES(a,contact,rid);
RETURN last_insert_id();
END &&
DELIMITER ;



DELIMITER &&
CREATE FUNCTION ADD_WAITER(wname varchar(20), contact NUMERIC(10))
RETURNS INT DETERMINISTIC
BEGIN
INSERT INTO WAITER_INFO(WNAME,CONTACT) VALUES(wname,contact);
RETURN last_insert_id();
END &&
DELIMITER ;


DELIMITER &&
CREATE FUNCTION ASSIGN_WAITER(table_id INT)
RETURNS INT DETERMINISTIC
BEGIN
DECLARE waiter_id INT;
SELECT WAITER_INFO.WID INTO waiter_id 
FROM WAITER_INFO LEFT JOIN WAITER_ASSIGNED ON WAITER_INFO.WID = WAITER_ASSIGNED.WID
WHERE TABLE_ID IS NOT NULL
GROUP BY WAITER_INFO.WID
ORDER BY COUNT(WAITER_ASSIGNED.WID) ASC
LIMIT 1;

INSERT INTO WAITER_ASSIGNED(WID,TABLE_ID) VALUES(waiter_id,table_id);
RETURN waiter_id;
END &&
DELIMITER ;



DELIMITER &&
CREATE FUNCTION ASSIGN_CHEF(order_id INT)
RETURNS INT DETERMINISTIC
BEGIN
DECLARE chef_id INT;
SELECT CHEF.CHEFID INTO chef_id 
FROM CHEF LEFT JOIN CHEF_ASSIGNED ON CHEF.CHEFID = CHEF_ASSIGNED.CHEFID
WHERE ORDER_ID IS NOT NULL
GROUP BY CHEF.CHEFID
ORDER BY COUNT(CHEF_ASSIGNED.CHEFID) ASC
LIMIT 1;

INSERT INTO CHEF_ASSIGNED(CHEFID,ORDER_ID) VALUES(chef_id,order_id);
RETURN chef_id;
END &&
DELIMITER ;






-- DROP FUNCTION ASSIGN_WAITER;
DELIMITER &&
CREATE FUNCTION ADD_ORDER(T_ID INT)
RETURNS INT DETERMINISTIC
BEGIN
INSERT INTO ORDER_INFO(TABLE_ID) VALUES(T_ID);
RETURN last_insert_id();
END &&
DELIMITER ;

DELIMITER &&
CREATE FUNCTION ADD_ORDER_ITEM(id int, t_id int, item_id int, quantity int)
RETURNS INT DETERMINISTIC
BEGIN
    DECLARE order_id INT;
    IF id IS NULL THEN
        SET order_id = ADD_ORDER(t_id);
    ELSE SET order_id = id;
    END IF;
    INSERT INTO ORDER_ITEMS(ORDER_NO,ITEM_ID,QUANTITY) VALUES(order_id,item_id,quantity);
    RETURN order_id;
END &&
DELIMITER ;


 
DELIMITER &&
CREATE FUNCTION ADD_MENU_ITEM(name varchar(20), price decimal(10,2),decription varchar(20))
RETURNS INT DETERMINISTIC
BEGIN
INSERT INTO MENU(ITEM_NAME,PRICE,DESCRIPTION) VALUES(name,price,descirption);
RETURN last_insert_id();
END &&
DELIMITER ;


DELIMITER &&
CREATE FUNCTION ADD_CHEF(name varchar(20))
RETURNS INT DETERMINISTIC
BEGIN
INSERT INTO CHEF(CHEFNAME) VALUES(name);
RETURN last_insert_id();
END &&
DELIMITER ;


 -- List top 10 most selling items


DELIMITER &&

CREATE PROCEDURE UPDATE_TOP_SELLERS()
BEGIN
	DELETE FROM TOP_SELLERS;
	INSERT INTO TOP_SELLERS
	SELECT ITEM_ID, ITEM_NAME
    FROM ORDER_ITEMS NATURAL JOIN MENU
    GROUP BY ITEM_ID
    ORDER BY SUM(QUANTITY) DESC
    LIMIT 1;
END &&
DELIMITER ;
 
 
 -- Find total revenue of a range
 
 DELIMITER &&
 
 CREATE FUNCTION GET_REVENUE(start DATETIME, end DATETIME)
 RETURNS DECIMAL(10,2) DETERMINISTIC
 BEGIN
 DECLARE totalRevenue DECIMAL(10,2);
 SELECT SUM(AMOUNT) INTO totalRevenue FROM BILL
 WHERE BILLING_TIME BETWEEN start and end; 
 RETURN totalRevenue;
 END &&

 DELIMITER ;
 
 
 
 
 
SELECT SUGGEST_MEAL(5000,'15:00');


DROP FUNCTION SUGGEST_MEAL;
 
 DELIMITER &&
 CREATE FUNCTION SUGGEST_MEAL(customer_budget DECIMAL(10,2), time TIME)
 RETURNS INT DETERMINISTIC
 BEGIN
 DECLARE total_budget_remaining DECIMAL(10, 2);
    DECLARE suggested_appetizer varchar(20);
    DECLARE suggested_main_course varchar(20);
    DECLARE suggested_dessert varchar(20);
    DECLARE suggested_beverage varchar(20);
    DECLARE CAT enum('LUNCH','BREAKFAST','DINNER');
    
    IF (time <= '11:00:00' and time >= '08:00:00') 
		THEN SET CAT = 'BREAKFAST';
    ELSEIF (time > '11:00:00' and time < '16:00:00')
		THEN SET CAT = 'LUNCH';
    ELSE SET CAT = 'DINNER';
    
	END IF;
    
	SET total_budget_remaining = customer_budget;

    -- Suggest appetizer
    (
        SELECT item_name INTO suggested_appetizer
        FROM MENU
        WHERE CATEGORY = 'STARTERS' AND price<=0.3*total_budget_remaining
        ORDER BY price DESC, popularity DESC, RAND() 
        LIMIT 1
    );
    
    
    SET total_budget_remaining = total_budget_remaining - (SELECT price FROM MENU WHERE item_name = suggested_appetizer);
		
        SELECT item_name INTO suggested_main_course
        FROM MENU
        WHERE category = 'LUNCH'
        AND price <= 0.6*total_budget_remaining
        ORDER BY price DESC, popularity DESC, RAND() 
        LIMIT 1;
    
    SET total_budget_remaining = total_budget_remaining - (SELECT price FROM MENU WHERE item_name = suggested_main_course);

    -- Suggest dessert
   (
        SELECT item_name INTO suggested_dessert
        FROM MENU
        WHERE category = 'DESSERT'
        AND price <= 0.8*total_budget_remaining
        ORDER BY price DESC, popularity DESC, RAND() 
        LIMIT 1
    );
    SET total_budget_remaining = total_budget_remaining - (SELECT price FROM MENU WHERE item_name = suggested_dessert);

    -- Suggest beverage
 (
        SELECT item_name INTO suggested_beverage
        FROM MENU
        WHERE category = 'BEVERAGES'
        AND price <= total_budget_remaining
        ORDER BY price DESC, popularity DESC, RAND() 
        LIMIT 1
    );
    DELETE FROM SUGGESTION;
    INSERT INTO SUGGESTION(STARTERS,MAIN_COURSE,DESSERT,BEVERAGE) VALUES(suggested_appetizer,suggested_main_course,suggested_dessert,suggested_beverage);

	RETURN total_budget_remaining;
 
 END &&
 DELIMITER ;
 



 -- Get the customer from the waiting list
 
DELIMITER &&
CREATE FUNCTION GET_CUSTOMER()
RETURNS INT DETERMINISTIC
BEGIN
    DECLARE MIN_ID INT;
    SELECT CUSID INTO MIN_ID
    FROM WAITING_CUSTOMERS
    ORDER BY ARRIVAL_TIME ASC
    LIMIT 1;
    RETURN MIN_ID;
END &&
DELIMITER ;


-- Calculate total amount of current order
DELIMITER &&
CREATE FUNCTION GET_ORDER_AMOUNT(O_NO INT)
RETURNS DECIMAL(10, 2) DETERMINISTIC
BEGIN
    DECLARE AMT DECIMAL(10, 2);

    SELECT SUM(OI.QUANTITY * M.PRICE) INTO AMT
    FROM ORDER_ITEMS OI
    JOIN MENU M ON OI.ITEM_ID = M.ITEM_ID
    WHERE OI.ORDER_NO = O_NO;
    RETURN AMT;
END &&
DELIMITER ;





 -- TRIGGERS

DELIMITER &&
CREATE TRIGGER ON_ASSIGN_TABLE
AFTER INSERT ON TABLE_ASSIGNED
FOR EACH ROW
BEGIN
	DECLARE O_NO INT;
    DECLARE T_ID INT;
    DECLARE C_ID INT;
    DECLARE WAITER_ID INT;
    SET T_ID = NEW.TABLE_ID;
    SET C_ID = NEW.CUSID;
    UPDATE TABLES
    SET IS_AVAILABLE = FALSE 
    WHERE ID = T_ID;
    INSERT INTO BILL(TABLE_ID) VALUES(T_ID);
    INSERT INTO LOGS VALUES(CONCAT('Table ',T_ID,' is assigned to customer ',C_ID));
    SET WAITER_ID = ASSIGN_WAITER(T_ID);
    INSERT INTO LOGS VALUES(CONCAT('Waiter ', WAITER_ID, ' is assigned to table ', T_ID));
END &&
DELIMITER ;


DELIMITER &&
CREATE TRIGGER ON_TABLE_FREE
AFTER DELETE ON TABLE_ASSIGNED
FOR EACH ROW
BEGIN
    DECLARE C_ID INT;
    DECLARE T_ID INT;
    SET T_ID = OLD.TABLE_ID;
    UPDATE TABLES
    SET IS_AVAILABLE = TRUE
    WHERE ID = T_ID;
    SET C_ID = GET_CUSTOMER();
    DELETE FROM ORDER_INFO WHERE TABLE_ID = T_ID;
    DELETE FROM WAITER_ASSIGNED WHERE TABLE_ID = T_ID;
    IF C_ID IS NOT NULL
    THEN 
		INSERT INTO TABLE_ASSIGNED(TABLE_ID,CUSID) VALUES(T_ID,C_ID);
	END IF;
END &&
DELIMITER ;



DELIMITER &&
CREATE TRIGGER ON_ORDER_COMPLETE
AFTER UPDATE ON ORDER_INFO
FOR EACH ROW
BEGIN
    DECLARE AMT DECIMAL(10, 2);
    DECLARE PREV DECIMAL(10, 2);
    SET AMT = GET_ORDER_AMOUNT(OLD.ORDER_NO);
    IF(NEW.STATUS = 'COMPLETED') THEN
		DELETE FROM CHEF_ASSIGNED
        WHERE ORDER_ID = OLD.ORDER_NO;
        SELECT AMOUNT INTO PREV
        FROM BILL
        WHERE TABLE_ID = OLD.TABLE_ID;
        UPDATE BILL
        SET AMOUNT = AMT + PREV
        WHERE TABLE_ID = OLD.TABLE_ID;
    END IF;
END && 
DELIMITER ; 

DELIMITER &&
CREATE TRIGGER ON_ORDER_INFO_ASSIGN_CHEF
AFTER INSERT ON ORDER_INFO
FOR EACH ROW
BEGIN
	DECLARE CH_ID INT;
    SET CH_ID = ASSIGN_CHEF(NEW.ORDER_NO);
END &&
DELIMITER ;

DELIMITER &&
CREATE TRIGGER UPDATE_POPULARITY
AFTER INSERT ON ORDER_ITEMS
FOR EACH ROW
BEGIN
	DECLARE PREV INT;
	SELECT POPULARITY INTO PREV FROM MENU WHERE ITEM_ID = NEW.ITEM_ID;
    UPDATE MENU
    SET POPULARITY = PREV + 1
    WHERE ITEM_ID = NEW.ITEM_ID;
END &&
DELIMITER ;

